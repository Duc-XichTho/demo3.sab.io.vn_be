import { cacheQueue } from "./src/services/redis/cacheQueue.js";
import { redisClient } from "./src/services/redis/redis.service.js";

async function runBenchmark() {
  // Th√™m ƒëo l∆∞·ªùng b·ªô nh·ªõ
  const memoryBefore = process.memoryUsage();
  
  const totalRequests = 1000000;
  console.log(`üöÄ Sending ${totalRequests} requests...`);
  const startTime = Date.now();

  // Th√™m theo d√µi ti·∫øn tr√¨nh
  let lastReportedProgress = 0;
  const progressInterval = Math.floor(totalRequests / 10); // B√°o c√°o 10 l·∫ßn

  for (let i = 0; i < totalRequests; i++) {
    cacheQueue.enqueue('set', `key_${i}`, { value: i });
    
    // B√°o c√°o ti·∫øn tr√¨nh
    if (i % progressInterval === 0 && i > lastReportedProgress) {
      const progress = Math.floor((i / totalRequests) * 100);
      console.log(`‚è≥ ƒê√£ x·ª≠ l√Ω ${i} requests (${progress}%)...`);
      lastReportedProgress = i;
    }
  }

  console.log(`‚è≥ ƒê√£ enqueue t·∫•t c·∫£ requests, ƒëang ƒë·ª£i flush ho√†n t·∫•t...`);
  
  // ƒê·ª£i flush xong v·ªõi timeout
  const maxWaitTime = 5 * 60 * 1000; // 5 ph√∫t
  const waitStartTime = Date.now();
  
  while ((cacheQueue.queue.length > 0 || cacheQueue.currentFlushes > 0) && 
         (Date.now() - waitStartTime < maxWaitTime)) {
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // B√°o c√°o ti·∫øn ƒë·ªô flush
    if (Date.now() % 500 < 100) {
      console.log(`‚è≥ C√≤n ${cacheQueue.queue.length} items trong queue, ${cacheQueue.currentFlushes} flushes ƒëang ch·∫°y...`);
    }
  }

  const totalTime = (Date.now() - startTime) / 1000;
  console.log(`‚úÖ Benchmark ho√†n th√†nh!`);
  console.log(`üî¢ T·ªïng requests: ${totalRequests}`);
  console.log(`üõ†Ô∏è  T·ªïng flush th·ª±c hi·ªán: ${cacheQueue.totalFlushes}`);
  console.log(`‚è±Ô∏è  T·ªïng th·ªùi gian: ${totalTime.toFixed(2)} gi√¢y`);
  console.log(`üöÄ Hi·ªáu su·∫•t trung b√¨nh: ${(totalRequests / totalTime).toFixed(2)} requests/gi√¢y`);
  
  // Th√™m th√¥ng tin v·ªÅ b·ªô nh·ªõ
  const memoryAfter = process.memoryUsage();
  console.log(`üìä Th√¥ng tin b·ªô nh·ªõ:`);
  console.log(`   - RSS tr∆∞·ªõc: ${formatBytes(memoryBefore.rss)}, sau: ${formatBytes(memoryAfter.rss)}`);
  console.log(`   - Heap tr∆∞·ªõc: ${formatBytes(memoryBefore.heapUsed)}, sau: ${formatBytes(memoryAfter.heapUsed)}`);
  console.log(`   - TƒÉng heap: ${formatBytes(memoryAfter.heapUsed - memoryBefore.heapUsed)}`);
  
  // Ki·ªÉm tra v√† b√°o c√°o c√°c items c√≤n l·∫°i trong queue (n·∫øu c√≥)
  if (cacheQueue.queue.length > 0) {
    console.warn(`‚ö†Ô∏è C√≥ ${cacheQueue.queue.length} items ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω trong queue!`);
  }
}

// H√†m h·ªó tr·ª£ ƒë·ªÉ format k√≠ch th∆∞·ªõc b·ªô nh·ªõ
function formatBytes(bytes, decimals = 2) {
  if (bytes === 0) return '0 Bytes';
  
  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
  
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  
  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
}

async function main() {
  try {
    console.log("‚è≥ K·∫øt n·ªëi Redis...");
    if (!redisClient.isOpen) {
      await redisClient.connect();
    }

    console.log("‚è≥ X√≥a d·ªØ li·ªáu c≈© (n·∫øu c√≥)...");
    // X√≥a d·ªØ li·ªáu benchmark c≈© (t√πy ch·ªçn)
    await redisClient.flushDb();
    
    console.log("‚è≥ B·∫Øt ƒë·∫ßu benchmark...");
    await runBenchmark();
  } catch (error) {
    console.error("‚ùå L·ªói trong qu√° tr√¨nh benchmark:", error);
  } finally {
    console.log("‚è≥ ƒê√≥ng k·∫øt n·ªëi Redis...");
    await redisClient.quit();
  }
}

main();